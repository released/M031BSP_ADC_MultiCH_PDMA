; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\adc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\adc.crf ..\..\..\Library\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=1

                  ADC_Close PROC
;;;75       */
;;;76     void ADC_Close(ADC_T *adc)
000000  2001              MOVS     r0,#1
;;;77     {
;;;78         SYS->IPRST1 |= SYS_IPRST1_ADCRST_Msk;
000002  0780              LSLS     r0,r0,#30
000004  68c2              LDR      r2,[r0,#0xc]
000006  1081              ASRS     r1,r0,#2
000008  430a              ORRS     r2,r2,r1
00000a  60c2              STR      r2,[r0,#0xc]
;;;79         SYS->IPRST1 &= ~SYS_IPRST1_ADCRST_Msk;
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  438a              BICS     r2,r2,r1
000010  60c2              STR      r2,[r0,#0xc]
;;;80         return;
;;;81     }
000012  4770              BX       lr
;;;82     
                          ENDP


                          AREA ||i.ADC_DisableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_DisableHWTrigger PROC
;;;126      */
;;;127    void ADC_DisableHWTrigger(ADC_T *adc)
000000  3080              ADDS     r0,r0,#0x80
;;;128    {
;;;129        adc->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  6801              LDR      r1,[r0,#0]
000004  22ff              MOVS     r2,#0xff
000006  32f1              ADDS     r2,r2,#0xf1
000008  4391              BICS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;130        return;
;;;131    }
00000c  4770              BX       lr
;;;132    
                          ENDP


                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=1

                  ADC_DisableInt PROC
;;;166      */
;;;167    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;168    {
;;;169        if((u32Mask) & ADC_ADF_INT)
;;;170            adc->ADCR &= ~ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  3080              ADDS     r0,r0,#0x80
000006  2b00              CMP      r3,#0                 ;169
000008  d002              BEQ      |L3.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4393              BICS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L3.16|
;;;171        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L3.26|
;;;172            adc->ADCMPR[0] &= ~ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4393              BICS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L3.26|
;;;173        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L3.36|
;;;174            adc->ADCMPR[1] &= ~ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4391              BICS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L3.36|
;;;175    
;;;176        return;
;;;177    }
000024  4770              BX       lr
;;;178    
                          ENDP


                          AREA ||i.ADC_EnableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_EnableHWTrigger PROC
;;;99       */
;;;100    void ADC_EnableHWTrigger(ADC_T *adc,
000000  b510              PUSH     {r4,lr}
;;;101                             uint32_t u32Source,
;;;102                             uint32_t u32Param)
;;;103    {
;;;104        if(u32Source == ADC_ADCR_TRGS_STADC)
;;;105        {
;;;106            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
000002  23ff              MOVS     r3,#0xff
000004  24ff              MOVS     r4,#0xff
000006  33f1              ADDS     r3,r3,#0xf1
000008  3401              ADDS     r4,#1
00000a  3080              ADDS     r0,r0,#0x80
00000c  2900              CMP      r1,#0                 ;104
00000e  d005              BEQ      |L4.28|
;;;107                        ((u32Source) | (u32Param) | ADC_ADCR_TRGEN_Msk);
;;;108        }
;;;109        else if(u32Source == ADC_ADCR_TRGS_TIMER)
;;;110        {
;;;111            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
;;;112                        ((u32Source) | ADC_ADCR_TRGEN_Msk);
;;;113        }
;;;114        else
;;;115        {
;;;116            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
000010  6802              LDR      r2,[r0,#0]
000012  439a              BICS     r2,r2,r3
000014  430a              ORRS     r2,r2,r1
000016  4322              ORRS     r2,r2,r4
000018  6002              STR      r2,[r0,#0]
;;;117                        ((u32Source) | ADC_ADCR_TRGEN_Msk);
;;;118        }
;;;119        return;
;;;120    }
00001a  bd10              POP      {r4,pc}
                  |L4.28|
00001c  6801              LDR      r1,[r0,#0]            ;106
00001e  4399              BICS     r1,r1,r3              ;106
000020  4311              ORRS     r1,r1,r2              ;106
000022  4321              ORRS     r1,r1,r4              ;106
000024  6001              STR      r1,[r0,#0]            ;106
000026  bd10              POP      {r4,pc}
;;;121    
                          ENDP


                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=1

                  ADC_EnableInt PROC
;;;143      */
;;;144    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;145    {
;;;146        if((u32Mask) & ADC_ADF_INT)
;;;147            adc->ADCR |= ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  3080              ADDS     r0,r0,#0x80
000006  2b00              CMP      r3,#0                 ;146
000008  d002              BEQ      |L5.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4313              ORRS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L5.16|
;;;148        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L5.26|
;;;149            adc->ADCMPR[0] |= ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4313              ORRS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L5.26|
;;;150        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L5.36|
;;;151            adc->ADCMPR[1] |= ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4311              ORRS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L5.36|
;;;152    
;;;153        return;
;;;154    }
000024  4770              BX       lr
;;;155    
                          ENDP


                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;43       */
;;;44     void ADC_Open(ADC_T *adc,
000000  b570              PUSH     {r4-r6,lr}
;;;45                   uint32_t u32InputMode,
;;;46                   uint32_t u32OpMode,
;;;47                   uint32_t u32ChMask)
;;;48     {
;;;49         /* Do calibration for ADC to decrease the effect of electrical random noise. */
;;;50         if ((adc->ADCALSTSR & ADC_ADCALSTSR_CALIF_Msk) == 0)
000002  4604              MOV      r4,r0
000004  34ff              ADDS     r4,r4,#0xff
000006  3481              ADDS     r4,r4,#0x81
000008  6865              LDR      r5,[r4,#4]
00000a  3080              ADDS     r0,r0,#0x80
00000c  07ed              LSLS     r5,r5,#31
00000e  2d00              CMP      r5,#0
000010  d115              BNE      |L6.62|
;;;51         {
;;;52             /* Must reset ADC before ADC calibration */
;;;53             adc->ADCR |= ADC_ADCR_RESET_Msk;
000012  6805              LDR      r5,[r0,#0]
000014  2601              MOVS     r6,#1
000016  0336              LSLS     r6,r6,#12
000018  4335              ORRS     r5,r5,r6
00001a  6005              STR      r5,[r0,#0]
                  |L6.28|
;;;54             while((adc->ADCR & ADC_ADCR_RESET_Msk) == ADC_ADCR_RESET_Msk);
00001c  6805              LDR      r5,[r0,#0]
00001e  04ed              LSLS     r5,r5,#19
000020  d4fc              BMI      |L6.28|
;;;55     
;;;56             adc->ADCALSTSR |= ADC_ADCALSTSR_CALIF_Msk;  /* Clear Calibration Finish Interrupt Flag */
000022  6865              LDR      r5,[r4,#4]
000024  2601              MOVS     r6,#1
000026  4335              ORRS     r5,r5,r6
000028  6065              STR      r5,[r4,#4]
;;;57             adc->ADCALR |= ADC_ADCALR_CALEN_Msk;        /* Enable Calibration function */
00002a  6825              LDR      r5,[r4,#0]
00002c  4335              ORRS     r5,r5,r6
00002e  6025              STR      r5,[r4,#0]
;;;58             ADC_START_CONV(adc);                        /* Start to calibration */
000030  6805              LDR      r5,[r0,#0]
000032  02f6              LSLS     r6,r6,#11
000034  4335              ORRS     r5,r5,r6
000036  6005              STR      r5,[r0,#0]
                  |L6.56|
;;;59             while((adc->ADCALSTSR & ADC_ADCALSTSR_CALIF_Msk) != ADC_ADCALSTSR_CALIF_Msk);   /* Wait calibration finish */
000038  6865              LDR      r5,[r4,#4]
00003a  07ed              LSLS     r5,r5,#31
00003c  d0fc              BEQ      |L6.56|
                  |L6.62|
;;;60         }
;;;61     
;;;62         adc->ADCR = (adc->ADCR & (~(ADC_ADCR_DIFFEN_Msk | ADC_ADCR_ADMD_Msk))) | \
00003e  6804              LDR      r4,[r0,#0]
000040  4d03              LDR      r5,|L6.80|
000042  402c              ANDS     r4,r4,r5
000044  430c              ORRS     r4,r4,r1
000046  4314              ORRS     r4,r4,r2
000048  6004              STR      r4,[r0,#0]
;;;63                     (u32InputMode) | \
;;;64                     (u32OpMode);
;;;65     
;;;66         adc->ADCHER = (adc->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32ChMask);
00004a  6841              LDR      r1,[r0,#4]
00004c  6043              STR      r3,[r0,#4]
;;;67     
;;;68         return;
;;;69     }
00004e  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP

                  |L6.80|
                          DCD      0xfffffbf3

                          AREA ||i.ADC_SetExtendSampleTime||, CODE, READONLY, ALIGN=1

                  ADC_SetExtendSampleTime PROC
;;;187      */
;;;188    void ADC_SetExtendSampleTime(ADC_T *adc, uint32_t u32ModuleNum, uint32_t u32ExtendSampleTime)
000000  3080              ADDS     r0,r0,#0x80
;;;189    {
;;;190        adc->ESMPCTL = (adc->ESMPCTL & ~ADC_ESMPCTL_EXTSMPT_Msk) |
000002  6a01              LDR      r1,[r0,#0x20]
000004  0a09              LSRS     r1,r1,#8
000006  0209              LSLS     r1,r1,#8
000008  4311              ORRS     r1,r1,r2
00000a  6201              STR      r1,[r0,#0x20]
;;;191                       (u32ExtendSampleTime << ADC_ESMPCTL_EXTSMPT_Pos);
;;;192    }
00000c  4770              BX       lr
;;;193    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 402
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
